# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

variables:
  DOCKER_BUILDKIT: 1

trigger:
- master

pr:
- master

jobs:
- job: buildAndTestSPBM
  displayName: "Build SPBM w/"
  pool:
    vmImage: 'ubuntu-18.04'
  strategy:
    matrix:
      "Python 3.6":
        PYTHON_VERSION: '3.6'
      "Python 3.7":
        PYTHON_VERSION: '3.7'
    maxParallel: 3
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(PYTHON_VERSION)'
      architecture: 'x64'

  - task: PythonScript@0
    displayName: 'Export project path'
    inputs:
      scriptSource: 'inline'
      script: |
        """Search all subdirectories for `manage.py`."""
        from glob import iglob
        from os import path
        # Python >= 3.5
        manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
        if not manage_py:
            raise SystemExit('Could not find a Django project')
        project_location = path.dirname(path.abspath(manage_py))
        print('Found Django project in', project_location)
        print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

  - script: |
      python -m pip install --upgrade pip setuptools wheel
      pip install -r requirements.txt
      pip install unittest-xml-reporting
    displayName: 'Install prerequisites'
    failOnStderr: true

  - script: |
      pushd '$(projectRoot)'
      python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
    displayName: 'Run tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: "**/TEST-*.xml"
      testRunTitle: 'Python $(PYTHON_VERSION)'
    condition: succeededOrFailed()

- deployment: buildDockerContainer
  dependsOn: buildAndTestSPBM
  pool:
    vmImage: 'ubuntu-18.04'
  environment: "test"
  displayName: "Build & Publish Docker Container"
  workspace:
    clean: outputs
  strategy:
   runOnce:
     deploy:
       steps:
        - checkout: self
        - script: |
            pwd
            ls -la
            cd $(Build.SourcesDirectory)
            pwd
            ls -la
          displayName: "Current working directory status"
        - task: Docker@2
          displayName: "Build plain Docker container"
          inputs:
            command: 'build'
            Dockerfile: 'Dockerfile'
        - task: DockerCompose@0
          displayName: "Build with docker-compose"
          inputs:
            containerregistrytype: 'Container Registry'
            dockerRegistryEndpoint: 'Docker Hub'
            dockerComposeFile: 'docker-compose.yml'
            additionalDockerComposeFiles: 'docker-compose.prod.yml'
            action: 'Build services'
            includeSourceTags: true
            includeLatestTag: true
