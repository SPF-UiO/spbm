# This references the default Python container from
# the Docker Hub with the 2.7 tag:
# https://registry.hub.docker.com/_/python/
# If you want to use a slim Python container with
# version 3.4.3 you would use: python:3.4-slim
# If you want Google's container you would reference google/python
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: 
  id: python:3.5-alpine
  cmd: /bin/sh
# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongo
    # http://devcenter.wercker.com/docs/services/mongodb.html

# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html
build:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    - script:
        name: alpine cache
        code: |
          echo "Trying to create cache"
          mkdir -p $WERCKER_CACHE_DIR/apk-cache
          ln -s $WERCKER_CACHE_DIR/apk-cache /etc/apk/cache
          echo "Cache at $WERCKER_CACHE_DIR/apk-cache"
          apk cache clean
          echo "Cleaned the cache"

    # There are a lot of packages that we depend on
    - script:
        name: alpine pre-requisites
        code: |
          apk update
          apk add gettext gcc linux-headers jpeg-dev postgresql-dev musl-dev 

    # Once done, install virtualenv so we're ready to use it
    - script:
        name: virtualenv-install
        code: |
          export PIP_CACHE_DIR=$WERCKER_CACHE_DIR/pip-download-cache
          export PIP_FIND_LINKS=$WERCKER_CACHE_DIR/pip-wheels
          pip install virtualenv 

    # A step that sets up the python virtual environment
    - virtualenv:
        name: setup virtual environment
        install_wheel: True # Enable wheel to speed up builds (experimental)


    # Installing the CI requirements, incl. coveralls and coverage
    - script:
        name: pip install coverage outside of requirements.txt w/wheel
        code: |
          pip wheel coverage
          pip install coverage

    # A step that executes `pip install` command.
    - pip-install:
        name: pip install spbm requirements w/wheel
        auto_run_wheel: True

    # Yield some python information
    - script:
        name: python and pip version information
        code: |
          echo "python version $(python --version) running"
          echo "pip version $(pip --version) running"

    # Then we run the tests of our Django instance
    - script:
        name: run tests with coverage
        code: |
          python -m coverage run ./manage.py test -v 3

    # Once that's done, let's compile the current translation
    - script: 
        name: compile translation messages
        code: |
          python ./manage.py compilemessages

  after-steps:
    # Installing the CI requirements, incl. coveralls and coverage
    - script:
        name: installing software requirements for coveralls
        code: |
          export PIP_CACHE_DIR=$WERCKER_CACHE_DIR/pip-download-cache
          export PIP_FIND_LINKS=$WERCKER_CACHE_DIR/pip-wheels
          apk add git
          pip install coveralls
    - script: 
        name: reporting to coveralls
        code: |
          info "Setting up environment variables for correct coveralls reporting"
          export CI_NAME='wercker'
          export CI_BRANCH=$WERCKER_GIT_BRANCH
          export CI_BUILD_URL=$WERCKER_BUILD_URL
          info "Report to coveralls"
          COVERALLS_REPO_TOKEN=$COVERALLS_TOKEN coveralls
        
################################################################################
# Deployment pipeline
# - Takes care of putting the bits and bytes in the right place.
production:
  steps:
    - script: install prerequisites
      code: |
        apk update
        apk add bash openssh
    - wercker/add-ssh-key@1.0.3:
        keyname: SPF
        user: $SPF_USERNAME
    - wercker/add-to-known_hosts@2.0.1:
        hostname: spf.cyb.no
        fingerprint: SHA256:KiAgxHLl7nmtUXSt9upc5kITU4ptvJAaTYkusTMequA
    - script: execute deployment script
      code: |
        ssh spf@spf.cyb.no /bin/bash << EOF
          set -ex
          if ! [ -d ~/src ]; then
              git clone git@github.com:SPF-UiO/spbm.git src
              cd ~/src
              git checkout master
              virtualenv -p python3 --prompt "(spbm)" .virtualenv
              ./scripts/update.sh && ./scripts/run_production.sh
          else
              cd ~/src
              (./scripts/backup.sh && git fetch && git reset --hard origin/master)
              ./scripts/update.sh
          fi
        EOF
